#!/usr/bin/env node

/**
 * Script para verificar se a corre√ß√£o das vari√°veis de ambiente foi bem-sucedida
 * Execute com: node verify-env-fix.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando corre√ß√£o das vari√°veis de ambiente...\n');

// Arquivos para verificar
const filesToCheck = [
  'lib/supabase.ts',
  'utils/secureLogging.ts',
  'utils/environment.ts',
  'App.tsx',
  'hooks/useTodoApp.ts'
];

// Padr√µes problem√°ticos a evitar
const problematicPatterns = [
  /import\.meta\.env\.DEV(?!\S)/g,  // import.meta.env.DEV (mas n√£o DEVELOPMENT)
  /process\.env\.DEV(?!\S)/g,       // process.env.DEV (mas n√£o DEVELOPMENT)
  /\.env\.DEV(?!\S)/g,              // qualquer .env.DEV
];

// Padr√µes corretos esperados
const expectedPatterns = [
  /import.*environment.*from/g,      // import from environment module
  /isDevelopment\(\)/g,              // calls to isDevelopment()
  /getEnvVar\(/g,                    // calls to getEnvVar()
];

let hasErrors = false;
let hasCorrectPatterns = false;

console.log('üìÇ Verificando arquivos...\n');

for (const filePath of filesToCheck) {
  const fullPath = path.join(__dirname, filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${filePath}`);
    continue;
  }
  
  console.log(`üìÑ Verificando: ${filePath}`);
  
  try {
    const content = fs.readFileSync(fullPath, 'utf8');
    
    // Verificar padr√µes problem√°ticos
    let fileHasErrors = false;
    for (const pattern of problematicPatterns) {
      const matches = content.match(pattern);
      if (matches) {
        console.log(`   ‚ùå Encontrado padr√£o problem√°tico: ${matches[0]}`);
        fileHasErrors = true;
        hasErrors = true;
      }
    }
    
    // Verificar padr√µes corretos
    let fileHasCorrectPatterns = false;
    for (const pattern of expectedPatterns) {
      const matches = content.match(pattern);
      if (matches) {
        console.log(`   ‚úÖ Padr√£o correto encontrado: ${matches[0]}`);
        fileHasCorrectPatterns = true;
        hasCorrectPatterns = true;
      }
    }
    
    if (!fileHasErrors && !fileHasCorrectPatterns) {
      console.log(`   ‚ö™ Nenhum padr√£o relacionado encontrado`);
    } else if (!fileHasErrors) {
      console.log(`   ‚úÖ Arquivo limpo de padr√µes problem√°ticos`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao ler arquivo: ${error.message}`);
    hasErrors = true;
  }
  
  console.log('');
}

// Verificar se arquivos espec√≠ficos existem
console.log('üìã Verificando arquivos de corre√ß√£o...\n');

const correctionFiles = [
  'utils/environment.ts',
  'PRODUCTION-ENV-FIX.md'
];

for (const filePath of correctionFiles) {
  const fullPath = path.join(__dirname, filePath);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${filePath} - Arquivo de corre√ß√£o presente`);
  } else {
    console.log(`‚ùå ${filePath} - Arquivo de corre√ß√£o ausente`);
    hasErrors = true;
  }
}

console.log('\n' + '='.repeat(60));

// Resultado final
if (hasErrors) {
  console.log('‚ùå VERIFICA√á√ÉO FALHOU');
  console.log('   Ainda existem padr√µes problem√°ticos no c√≥digo.');
  console.log('   Revise os arquivos listados acima.');
  process.exit(1);
} else if (hasCorrectPatterns) {
  console.log('‚úÖ VERIFICA√á√ÉO PASSOU COM SUCESSO');
  console.log('   - Nenhum padr√£o problem√°tico encontrado');
  console.log('   - Padr√µes corretos implementados');
  console.log('   - Arquivos de corre√ß√£o presentes');
  console.log('\nüéâ A corre√ß√£o foi implementada corretamente!');
} else {
  console.log('‚ö™ VERIFICA√á√ÉO NEUTRA');
  console.log('   - Nenhum padr√£o problem√°tico encontrado');
  console.log('   - Nenhum padr√£o de corre√ß√£o detectado');
  console.log('   - C√≥digo parece estar limpo');
}

console.log('\nüöÄ Para testar a aplica√ß√£o:');
console.log('   npm run build');
console.log('   npm run preview');
console.log('\nüí° Para deploy em produ√ß√£o:');
console.log('   Configure as vari√°veis VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY');
console.log('   na plataforma de deploy (Vercel, Netlify, etc.)');